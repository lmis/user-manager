package layout

import (
    "html/template"
)

var initScriptTemplate = template.Must(template.New("initScript").Parse(`
    <script type="text/javascript" nonce="{{.Nonce}}">
        // HTMX CSRF double submit
        const csrfCookieName = "{{if ne .Environment "local"}}__Host-{{end}}CSRF-Token";
        const csrfToken = "{{.CsrfToken}}";
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        document.cookie = `+"`"+`${csrfCookieName}=${csrfToken}; expires=${tomorrow.toUTCString()}; path=/; samesite=strict; {{ if ne .Environment "local"}}secure; {{end}}`+"`"+`;
        document.addEventListener('htmx:configRequest', (event) => {
            // TODO: Update cookie if it's expired
            event.detail.headers['X-CSRF-Token'] = csrfToken;
        });

        // HTMX Settings
        window.onload = () => {
            htmx.config.refreshOnHistoryMiss = true;
            htmx.config.selfRequestsOnly = true;
            htmx.config.allowEval = false;
            htmx.config.allowScriptTags = false;
        };

        // TODO: Handle htmx:responseError and htmx:sendError

        // TODO: Use caching headers?
    </script>
`))

templ head(title string, nonce string, csrfToken string, environment string) {
    <head>
        <title>{title}</title>
        <meta charset="UTF-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <link rel="stylesheet" href="/assets/tailwind.css"/>
        @templ.FromGoHTML(initScriptTemplate, map[string]interface{}{
                "Nonce": nonce,
                "Environment": environment,
                "CsrfToken": csrfToken,
            })

        // TODO: Bundle this yourself
        <script src="https://unpkg.com/htmx.org@2.0.0/dist/htmx.min.js"
                integrity="sha384-wS5l5IKJBvK6sPTKa2WZ1js3d947pvWXbPJ1OmWfEuxLgeHcEbjUUA5i9V5ZkpCw"
                crossorigin="anonymous"
                nonce={nonce}
                />
        <script src="/assets/web-components-all.js" nonce={nonce}/>
    </head>
}