// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package resource

import (
	"github.com/gin-gonic/gin"
	"user-manager/cmd/app/injector"
	"user-manager/repository"
	"user-manager/service"
)

// Injectors from wire.go:

func InitializeEmailConfirmationResource(c *gin.Context) *EmailConfirmationResource {
	securityLog := injector.ProvideSecurityLog(c)
	nullable := injector.ProvideUserSession(c)
	tx := injector.ProvideTx(c)
	userRepository := repository.ProvideUserRepository(tx)
	emailConfirmationResource := ProvideEmailConfirmationResource(securityLog, nullable, userRepository)
	return emailConfirmationResource
}

func InitializeLoginResource(c *gin.Context) *LoginResource {
	securityLog := injector.ProvideSecurityLog(c)
	sessionCookieService := service.ProvideSessionCookieService(c)
	tx := injector.ProvideTx(c)
	sessionRepository := repository.ProvideSessionRepository(tx)
	userRepository := repository.ProvideUserRepository(tx)
	secondFactorThrottlingRepository := repository.ProvideSecondFactorThrottlingRepository(tx)
	loginResource := ProvideLoginResource(securityLog, sessionCookieService, sessionRepository, userRepository, secondFactorThrottlingRepository)
	return loginResource
}

func InitializeRetriggerConfirmationEmailResource(c *gin.Context) *RetriggerConfirmationEmailResource {
	tx := injector.ProvideTx(c)
	userRepository := repository.ProvideUserRepository(tx)
	mailQueueRepository := repository.ProvideMailQueueRepository(tx)
	config := injector.ProvideConfig()
	v := injector.ProvideTranslations()
	template := injector.ProvideBaseTemplate()
	mailQueueService := service.ProvideMailQueueService(mailQueueRepository, config, v, template)
	securityLog := injector.ProvideSecurityLog(c)
	nullable := injector.ProvideUserSession(c)
	retriggerConfirmationEmailResource := ProvideRetriggerConfirmationEmailResource(userRepository, mailQueueService, securityLog, nullable)
	return retriggerConfirmationEmailResource
}

func InitializeUserInfoResource(c *gin.Context) *UserInfoResource {
	nullable := injector.ProvideUserSession(c)
	userInfoResource := ProvideUserInfoResource(nullable)
	return userInfoResource
}
